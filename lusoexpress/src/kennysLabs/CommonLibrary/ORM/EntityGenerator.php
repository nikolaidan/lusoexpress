<?php

namespace kennysLabs\CommonLibrary\ORM;

use kennysLabs\CommonLibrary\ConfigParser;

class EntityGenerator
{
    protected static $instance;
    protected $pdo;
    protected $config;

    protected $dbVarMapper = [
        'enum' => 'string',
        'varchar' => 'string',
        'timestamp' => 'string',
        'char' => 'string',
        'int' => 'int',
        'smallint' => 'int',
        'tinyint' => 'bool'
    ];

    /**
     * @param \FluentPDO $pdo
     * @param ConfigParser $config
     * @return EntityGenerator
     */
    public static function getInstance(\FluentPDO $pdo, ConfigParser $config)
    {
        if (static::$instance instanceof self) {
            return static::$instance;
        }

        return static::$instance = new self($pdo, $config);
    }

    /**
     * @param \FluentPDO $pdo
     * @param ConfigParser $config
     */
    protected function __construct(\FluentPDO $pdo, ConfigParser $config)
    {
        $this->pdo = $pdo;
        $this->config = $config;
    }

    /**
     * @return array
     */
    public function listTables()
    {
        $tables = $this->pdo->getPdo()->query('SHOW TABLES')->fetchAll();

        return $tables;
    }

    /**
     * @return array
     */
    public function listTableFields()
    {
        $tables = self::listTables();

        $tablesInfo = [];

        foreach($tables as $table) {
            $tableDescription = $this->pdo->getPdo()->query('DESCRIBE `' . $table[0] . '`')->fetchAll();

            foreach ($tableDescription as $idx => $description) {
                $tablesInfo[$table[0]][$description['Field']] = $description;
                $tablesInfo[$table[0]][$description['Field']]['Unique'] = false;
            }

            $tableIndexes = $this->pdo->getPdo()->query('SHOW INDEX FROM `' . $table[0] . '`')->fetchAll();
            foreach ($tableIndexes as $idx => $index) {
                if($index['Key_name'] !== 'PRIMARY' && $index['Non_unique'] == '0') {
                    $tablesInfo[$table[0]][$index['Column_name']]['Unique'] = true;
                }
            }

        }

        return $tablesInfo;
    }

    /**
     * Generate DB Entity files based on the tables structure.
     */
    public function generateEntityFile() {
        $_s = "<?php" . PHP_EOL;
        $_e = PHP_EOL;
        $_t = "\t";
        $_appNamespace = $this->config->{'main_section'}['APP_NAMESPACE'];
        $_appName = $this->config->{'main_section'}['APP_NAME'];

        $fileContents = '';
        $entityPath = ROOT_PATH . DIRECTORY_SEPARATOR . '..' .
            DIRECTORY_SEPARATOR . 'src' .
            DIRECTORY_SEPARATOR . $_appNamespace .
            DIRECTORY_SEPARATOR . $_appName  .
            DIRECTORY_SEPARATOR . 'Infrastructure' .
            DIRECTORY_SEPARATOR . 'Entity' .
            DIRECTORY_SEPARATOR;

        // cleanup

        $files = glob($entityPath . '*'); // get all file names
        foreach($files as $file) {
            if(is_file($file)) {
                unlink($file);
            }
        }

        $tablesInfo = $this->listTableFields();

        foreach ($tablesInfo as $table => $fields)
        {
            $entityUniqueKeys = '';
            $entityPrimaryKeys = '';
            $entityFields = '';
            $parsedTableName = implode('', array_map(function($word) { return ucfirst($word); }, explode('_', $table)));

            $fileContents .= $_s . $_e;
            $fileContents .= '// This file was automatically generated by CommonLibrary\ORM\EntityGenerator' . $_e . $_e;
            $fileContents .= 'namespace ' . $_appNamespace . '\\' . $_appName . '\Infrastructure\Entity;' . $_e . $_e;
            $fileContents .= 'use ' . $_appNamespace . '\CommonLibrary\ORM\EntityInterface;' . $_e;
            $fileContents .= 'use ' . $_appNamespace . '\CommonLibrary\ORM\EntityAbstract;' . $_e . $_e;
            $fileContents .= 'class ' . $parsedTableName . ' extends EntityAbstract implements EntityInterface {' . $_e . $_e;
            $fileContents .= $_t . 'const ENTITY_NAME = \'' . $table . '\';' . $_e . $_e;

            foreach ($fields as $idx => $field)
            {
                $fileContents .= $_t . '/** @var ' . $this->processFieldType($field['Type']) . ' $' . $idx . ' */' . $_e;
                $fileContents .= $_t . 'private $' . $idx . ';' . $_e . $_e;

                if($field['Key'] == 'PRI')
                {
                    $entityPrimaryKeys .= '\'' . $idx . '\', ';
                }

                if($field['Unique'])
                {
                    $entityUniqueKeys .= '\'' . $idx . '\', ';
                }

                $entityFields .= '\'' . $idx . '\', ';
            }

            $fileContents .= $_t . '/** @var array $_primaryKeys */' . $_e;
            $fileContents .= $_t . 'protected $_primaryKey = [' . substr($entityPrimaryKeys, 0, -2) . '];' . $_e . $_e;
            $fileContents .= $_t . '/** @var array $_fields */' . $_e;
            $fileContents .= $_t . 'protected $_fields = [' . substr($entityFields, 0, -2) . '];' . $_e . $_e;
            $fileContents .= $_t . '/** @var array $uniqueKeys */' . $_e;
            $fileContents .= $_t . 'protected $_uniqueKeys = [' . substr($entityUniqueKeys, 0, -2) . '];' . $_e . $_e;

            foreach ($fields as $idx => $field)
            {
                $parsedFieldName = implode('', array_map(function($word) { return ucfirst($word); }, explode('_', $idx)));

                $fileContents .= $_t . '/**'  . $_e .
                                    $_t  . ' *' . ' @return ' . $this->processFieldType($field['Type']) . $_e .
                                    $_t . ' */' . $_e;

                $fileContents .= $_t . 'public function get' . $parsedFieldName . '()' . $_e;
                $fileContents .= $_t . '{' . $_e;
                $fileContents .= $_t . $_t . 'return $this->' . $idx . ';' . $_e;
                $fileContents .= $_t . '}' . $_e . $_e;

                $fileContents .= $_t . '/**'  . $_e .
                                    $_t  . ' *' . ' @param ' . $this->processFieldType($field['Type']) . ' $value' . $_e .
                                    $_t . ' */' . $_e;

                $fileContents .= $_t . 'protected function _set' . $parsedFieldName . '($value)' . $_e;
                $fileContents .= $_t . '{' . $_e;
                $fileContents .= $_t . $_t . '$this->' . $idx . ' = $value;' . $_e;
                $fileContents .= $_t . '}' . $_e . $_e;

            }

            $fileContents .= '}' . $_e . $_e . $_e;

            $filePath = $entityPath . $parsedTableName . '.php';

            file_put_contents($filePath, $fileContents);
            $fileContents = '';
        }
    }

    /**
     * @param string $field
     * @return string
     */
    private function processFieldType($field) {
        $field = explode('(', $field)[0];
        return isset($this->dbVarMapper[$field]) ? $this->dbVarMapper[$field] : $field;
    }
}