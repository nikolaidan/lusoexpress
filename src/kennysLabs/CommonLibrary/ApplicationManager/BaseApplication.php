<?phpnamespace kennysLabs\CommonLibrary\ApplicationManager;use kennysLabs\CommonLibrary\ConfigParser;use kennysLabs\CommonLibrary\ApplicationManager\BaseController;class BaseApplication {    protected static $instances;    protected $pdo;    protected $config;    protected $requestData;    protected $route;    protected $twigLoader;    protected $twigEngine;    protected $templatesFolder;    private $namespace;    /** @var  Twig_TemplateInterface $globalTemplate */    private $globalTemplate;    const DEFAULT_TEMPLATE_FOLDER = 'Resources/views/%controller%/';    /**     * @param string $ini     * @param string $namespace     * @return BaseApplication     */    protected function __construct($ini, $namespace)    {        $this->registerNamespace($namespace);        $this->config = ConfigParser::getInstance($ini);        $this->pdo = new \FluentPDO(new \PDO("mysql:dbname=" . $this->config->{'db_section'}['db_database'],            $this->config->{'db_section'}['db_username'],            $this->config->{'db_section'}['db_password']));        // TODO: make paths configurable        $this->twigLoader = new \Twig_Loader_Filesystem(ROOT_PATH . '/../resources/views/');        $this->twigEngine= new \Twig_Environment($this->twigLoader, array(            'cache' => '/tmp',            'auto_reload' => true //TODO: Production version should be compiled so change..        ));        $this->templatesFolder = static::DEFAULT_TEMPLATE_FOLDER;    }    /**     * @return \Twig_Environment     */    public function getTemplateEngine()    {        return $this->twigEngine;    }    /**     * @return \Twig_Loader_Filesystem     */    public function getTemplateLoader()    {        return $this->twigLoader;    }    /**     * @param string $ini     * @param string $namespace     * @return BaseApplication     */    public static function getInstance($ini = '', $namespace = '')    {        if (empty($ini))        {            $ini = ROOT_PATH . '/../application/config/config.ini';        }        if (empty($namespace))        {            $namespace = 'kennysLabs';        }        if (static::$instances[$ini] instanceof static) {            return static::$instances[$ini];        }        return static::$instances[$ini] = new static($ini, $namespace);    }    /**     * @return array     */    public function getRoute()    {        return $this->route;    }    /*     * Runs the application     */    public function run()    {        $this->buildRoute();        // check for module specific config        $baseModulePath = ROOT_PATH . '/../src/' . $this->namespace . '/' . ucfirst(strtolower($this->route['module'])) . 'Module/';        $ini = $baseModulePath . 'config.ini';        if(file_exists($ini)) {            $moduleConfig = ConfigParser::getInstance($ini);            $this->overwriteRoute(is_array($moduleConfig->{'routes'}) ? $moduleConfig->{'routes'} : []);            if(!empty($moduleConfig->{'general'}['views']))            {                $this->templatesFolder = $moduleConfig->{'general'}['views'];            }        }        $callModule = $this->route['module'] . 'Module';        $callController = $this->route['controller'] . 'Controller';        $callAction = $this->route['action'] . 'Action';        $invokeController = $this->namespace . '\\'. $callModule .'\Controllers\\' . $callController;        if(!class_exists($invokeController)) {            throw new \Exception('Current controller cannot be found: ' . $callController);        }        /** @var BaseController $runController */        $runController = new $invokeController($this->getTemplateEngine());        if(!is_callable([$runController, $callAction])) {            throw new \Exception('Current action cannot be found: ' . $callAction);        }        // Run the action        $runController->$callAction();        // Setup the path folder        $this->getTemplateLoader()->addPath($baseModulePath);        $runController->setActionTemplate($this->getTemplateForAction());        $runController->setControllerTemplate($this->getTemplateForController());        if($this->getGlobalTemplate() instanceof \Twig_Template) {            echo $this->getGlobalTemplate()->render(['controllerTemplate' => $runController->render()]);        } else {            echo $runController->render();        }        // TODO: Sanitize all the input!!!!!!        // TODO: All the checks is actions are callable and controllers / modules exist        // TODO: Write all the exceptions    }    /**     * @param string $template     */    public function setGlobalTemplate($template)    {        $this->globalTemplate = $this->twigEngine->loadTemplate($template);    }    /**     * @return \Twig_TemplateInterface     */    public function getGlobalTemplate()    {        return $this->globalTemplate;    }    /*     * Gather info from all php variables     */    protected function gatherRequestData()    {        $this->requestData['post'] = $_POST;        $this->requestData['get'] = $_GET;        $this->requestData['files'] = $_FILES;        $this->requestData['request'] = $_REQUEST;    }    /**     * @param string $route     * @return array $uri     */    protected function resolveRoute($route)    {        $uri = explode('/',            explode('?', $route)[0]        );        array_shift($uri);        if(empty($uri[count($uri)-1])) {            unset($uri[count($uri)-1]);        }        return $uri;    }    /**     * @return string     */    protected function getTemplateForController()    {        $dashEnd = '';        if(substr($this->templatesFolder, -1, 1) == '/') {            $dashEnd = '/';        }        return str_replace('%controller%' . $dashEnd,            strtolower($this->route['controller']),            $this->templatesFolder) . '.html.twig';    }    /**     * @return string     */    protected function getTemplateForAction()    {        $dashEnd = '';        if(substr($this->templatesFolder, -1, 1) == '/') {            $dashEnd = '/';        }        return str_replace('%controller%' . $dashEnd,            strtolower($this->route['controller']),            $this->templatesFolder) . $dashEnd . strtolower($this->route['action']) . '.html.twig';    }    /**     * Build predefined route based on the input parameters     * @return $this     */    protected function buildRoute()    {        // TODO: handle all kind of possible problems / exceptions        $requestUrl = $this->resolveRoute($_SERVER['REQUEST_URI']);        $pattenUrl = $this->resolveRoute($this->config->{'main_section'}['URL_PATTERN']);        $moduleOffset = !empty($this->config->{'main_section'}['URL_DEFAULT_MODULE']);        $replacements = [0 => $moduleOffset ?                ucFirst($this->config->{'main_section'}['URL_DEFAULT_MODULE']) :                (isset($requestUrl[0]) ?                    ucFirst($requestUrl[0]) :                    'Main'),            1 => isset($requestUrl[(1-$moduleOffset)]) ?                    ucFirst($requestUrl[(1-$moduleOffset)]) :                    'Index',            2 => isset($requestUrl[(2-$moduleOffset)]) ?                    ucFirst($requestUrl[(2-$moduleOffset)]) :                    'Index'        ];        for ($i = 3; $i < count($requestUrl); $i++)        {            $replacements[3][] = $requestUrl[($i-$moduleOffset)];        }        $this->route = [];        foreach ($pattenUrl as $key => $value)        {            $this->route[substr($value, 1, -1)] = isset($replacements[$key]) ? $replacements[$key] : '';        }        return $this;    }    /**     * @param array $newRoutes     * @return $this     */    protected function overwriteRoute($newRoutes)    {        foreach ($newRoutes as $idx => $route)        {            $splitOffset = 0;            $splitRoute = explode('/', $idx);            $splitForward = explode(':', $route);            if(count($splitForward) == 3) {                $this->route['module'] = ucfirst(strtolower($splitForward[0]));                $splitOffset = 1;            }            if(isset($splitRoute[0]) && $this->route['controller'] == ucfirst(strtolower($splitRoute[0]))) {                $this->route['controller'] = ucfirst(strtolower($splitForward[$splitOffset]));            }            if(isset($splitRoute[1]) && $this->route['action'] == ucfirst(strtolower($splitRoute[1]))) {                $this->route['action'] = ucfirst(strtolower($splitForward[1+$splitOffset]));            }        }        return $this;    }    /*     * @param string $index     * @return array     */    public function getRequestData($index = 'request') {        return $this->requestData[$index];    }    /**     * @return string     */    public function getRegisteredNamespace()    {        return $this->namespace;    }    /**     * @param string $namespace     */    public function registerNamespace($namespace)    {        $this->namespace = $namespace;    }}