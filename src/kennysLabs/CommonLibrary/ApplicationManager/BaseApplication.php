<?phpnamespace kennysLabs\CommonLibrary\ApplicationManager;use kennysLabs\CommonLibrary\ConfigParser;class BaseApplication {    protected static $instances;    protected $pdo;    protected $config;    protected $requestData;    protected $uri;    /**     * @param string $ini     * @return BaseApplication     */    protected function __construct($ini)    {        $this->config = ConfigParser::getInstance($ini);        $this->pdo = new \FluentPDO(new \PDO("mysql:dbname=" . $this->config->{'db_section'}['db_database'],            $this->config->{'db_section'}['db_username'],            $this->config->{'db_section'}['db_password']));    }    /**     * @param string $ini     * @return BaseApplication     */    public static function getInstance($ini = '')    {        if (empty($ini))        {            $ini = ROOT_PATH . '/../application/config/config.ini';        }        if (static::$instances[$ini] instanceof static) {            return static::$instances[$ini];        }        return static::$instances[$ini] = new static($ini);    }    /*     * Runs the application     */    public function run()    {        $this->resolveRequestUri();        var_dump($this->uri);    }    /*     *     */    protected function gatherRequestData()    {        $this->requestData['post'] = $_POST;        $this->requestData['get'] = $_GET;        $this->requestData['files'] = $_FILES;        $this->requestData['request'] = $_REQUEST;    }    protected function resolveRequestUri()    {        $this->uri = explode('/',            explode('?', $_SERVER['REQUEST_URI'])[0]        );        array_shift($this->uri);        if(empty($this->uri[count($this->uri)-1])) {            unset($this->uri[count($this->uri)-1]);        }    }    /*     * @param string $index     * @return array     */    public function getRequestData($index = 'request') {        return $this->requestData[$index];    }}