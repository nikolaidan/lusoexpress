<?phpnamespace kennysLabs\CommonLibrary\ApplicationManager;use kennysLabs\CommonLibrary\ConfigParser;class BaseApplication {    protected static $instances;    protected $pdo;    protected $config;    protected $requestData;    protected $route;    /**     * @param string $ini     * @return BaseApplication     */    protected function __construct($ini)    {        $this->config = ConfigParser::getInstance($ini);        $this->pdo = new \FluentPDO(new \PDO("mysql:dbname=" . $this->config->{'db_section'}['db_database'],            $this->config->{'db_section'}['db_username'],            $this->config->{'db_section'}['db_password']));    }    /**     * @param string $ini     * @return BaseApplication     */    public static function getInstance($ini = '')    {        if (empty($ini))        {            $ini = ROOT_PATH . '/../application/config/config.ini';        }        if (static::$instances[$ini] instanceof static) {            return static::$instances[$ini];        }        return static::$instances[$ini] = new static($ini);    }    /**     * @return array     */    public function getRoute()    {        return $this->route;    }    /*     * Runs the application     */    public function run()    {        $this->route = $this->buildRoute();        $callAction = $this->route['action'] . 'Action';        $callModule = $this->route['module'];        $callController = 'kennysLabs\\'. $callModule . 'Module\Controllers\\' . $this->route['controller'] . 'Controller';        $runController = new $callController();        $runController->$callAction();        // TODO: All the checks is actions are callable and controllers / modules exist        // TODO: Write all the exceptions        // TODO: Open each module's config file.. check for routes and other configurations to override default behaviour.    }    /*     *     */    protected function gatherRequestData()    {        $this->requestData['post'] = $_POST;        $this->requestData['get'] = $_GET;        $this->requestData['files'] = $_FILES;        $this->requestData['request'] = $_REQUEST;    }    /*     *     */    protected function resolveRoute($route)    {        $uri = explode('/',            explode('?', $route)[0]        );        array_shift($uri);        if(empty($uri[count($uri)-1])) {            unset($uri[count($uri)-1]);        }        return $uri;    }    /*     *     */    protected function buildRoute()    {        // TODO: handle all kind of possible problems / exceptions        $requestUrl = $this->resolveRoute($_SERVER['REQUEST_URI']);        $pattenUrl = $this->resolveRoute($this->config->{'main_section'}['URL_PATTERN']);        $moduleOffset = !empty($this->config->{'main_section'}['URL_DEFAULT_MODULE']);        $replacements = [0 => $moduleOffset ?                ucFirst($this->config->{'main_section'}['URL_DEFAULT_MODULE']) :                (isset($requestUrl[0]) ?                    ucFirst($requestUrl[0]) :                    'Main'),            1 => isset($requestUrl[(1-$moduleOffset)]) ?                    ucFirst($requestUrl[(1-$moduleOffset)]) :                    'Index',            2 => isset($requestUrl[(2-$moduleOffset)]) ?                    ucFirst($requestUrl[(2-$moduleOffset)]) :                    'Index'        ];        for ($i = 3; $i < count($requestUrl); $i++)        {            $replacements[3][] = $requestUrl[($i-$moduleOffset)];        }        $builtRoute = [];        foreach ($pattenUrl as $key => $value)        {            $builtRoute[substr($value, 1, -1)] = isset($replacements[$key]) ? $replacements[$key] : '';        }        return $builtRoute;    }    /*     * @param string $index     * @return array     */    public function getRequestData($index = 'request') {        return $this->requestData[$index];    }}